Conner Mattingly
11282717
hw9

1.
Definitions:
  G(V, E): weighted directed graph, with set of vertices V and set of directed edges E,
  w(u, v): cost of directed edge from node u to node v (costs are non-negative).
  s: the source node
  t: the destination node
  i: the number of shortest paths to find
  P_u: a path from s to u
  B is a heap data structure containing paths
  P: set of shortest paths from s to t
  count_u: number of shortest paths found to node u
  Links that do not satisfy constraints on the shortest path are removed from the graph

Algorithm:
  *P = empty,
  *count_u = 0, for all u in V
  insert path P_s = {s} into B with cost 0
  
  while B is not empty and count_t < i:
    – let P_u be the shortest cost path in B with cost C
    – B = B − {P_u }, count_u = count_u + 1
    – if u = t then P = P and P_u
    – if count_u ≤ i then
      for each vertex v adjacent to u:
        – if v is not in P_u then
          – let P_v be a new path with cost C + w(u, v) formed by concatenating edge (u, v) to path P_u
          – insert P_v into B
  return P


2.
Definitions:
  G(V, E): weighted directed graph, with set of vertices V and set of directed edges E,
  w(u, v): cost of directed edge from node u to node v (costs are non-negative).
  s: the source node
  t: the destination node
  P_u: a path from s to u
  B is a heap data structure containing paths
  P: set of shortest paths from s to t
  R: bool stating whether or not the last edge was red (each path P_u has R) 
  Links that do not satisfy constraints on the shortest path are removed from the graph

Algorithm:
  *P = empty,
  *count_u = 0, for all u in V
  insert path P_s = {s} into B with cost 0
  
  while B is not empty :
    - let P_u be the shortest cost path in B with cost C
    - B = B − {P_u }
    - if u = t then P = P and P_u
      - return P_u (The shortest valid path)
    for each vertex v adjacent to u:
      - if v is not in P_u then
        - let P_v be a new path with cost C + w(u, v) formed by concatenating edge (u, v) to path P_u
        - if (u,v) is red then R = true
        - if (u,v) is yellow and R for P_u is true then do not add P_v to the path list since it is invalid 
        - else, insert P_v into B
  return P


3.
An algorithm to compute the size of the set C(w) would be a combination of multiple simpler algorithms.
First collect all the paths in a graph and their corosponding color sequences. This can be done by using a
depth first search to collect all paths and modifying it to keep track of the color sequence as well.  A list 
would be a capable data structure.  Once all color sequences are collected, then compare each of them to all others 
and remove any duplicates so that we are left with a set of all unique color sequences. The size of this set 
is the size of set {C(w): w being a unique path}.

v is a vertex in G

DFS(G,v):
  label v as discovered
    for all edges from v to w in G.adjacentEdges(v) 
      if vertex w is not labeled as discovered then
        recursively call DFS(G,w)


4. 
  This is an interesting question since the shortest path could differ significantly from the path with a minimal W(w).
For example take path w_1 which has six nodes with weights of one between each of them.  Now take path w_2 with three nodes 
and two edges connecting them.  One edge of weight two and one edge of weight one.  Path w_2 is shortest with a total cost of 
3 while w_1 has a minimal W(w) of 1 even though it is the longer of the two paths. This difference between the addition used 
in finding the shortest path and multiplication used in calculating W(w) is an interesting property.  It leads one to assume 
that a shortest path algorithm is not applicable in this case...  I am uncertain on how to proceed.  

After some consideration I relize that a shortest path algorithm can be used and the addition within the algorithm can be replaced by 
multiplication.

see the following adaptation of Dijkstra's algorithm.
NOTE: distance may be misleading since now we are multiplying weights.
  However just know that for a given path dist() ends up being W().


     Q = vertex set 
     W = value specified in question

     for each vertex v in Graph:           // Initialization
       dist(v) = INFINITY                  // Unknown distance from source to v
       prev(v) = UNDEFINED                 // Previous node in optimal multiplied path from source
       add v to Q                          // All nodes initially in Q (unvisited nodes)
     dist(source) = 0                      // W from source to source
     
     while Q is not empty:
      u = vertex in Q with min dist(u)    // Source node will be selected first
      remove u from Q 
       
      for each neighbor v of u:           // where v is still in Q.
        alt = dist(u) * weight(u, v)      // THIS IS THE MOST IMPORTANT PART (Instead of addition it is now multiplication)
        if alt < dist(v):               // A smaller path to v has been found
          dist(v) = alt 
          prev(v) = u 

      return dist(), prev()              // will be minimal W(w) with w being the path







